apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'java-library'
apply plugin: 'maven-publish'

group = 'dev.polaris'
version = '1.0'

// The bits that compiles the Avro (.avsc) schema files to java pojos
//
buildscript {
    ext.kotlin_version = '1.3.10'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.15.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "com.commercehub.gradle.plugin.avro"

sourceCompatibility = 1.8

repositories {
    // For io.confluent.kafka dependencies
    //
    maven { url 'https://packages.confluent.io/maven/' }

    // Primarily for the gradle-avro-plugin
    //
    jcenter()

    // For most other stuff
    //
    mavenCentral()
}

dependencies {
    // Kotlin standard library
    //
    compile "org.jetbrains.kotlin:kotlin-stdlib"

    // For kafka streams
    //
    compile('org.apache.kafka:kafka-streams:2.2.0')
    compile('org.apache.kafka:kafka-clients:2.2.0')

    // Avro and Schema registry
    //
    compile('io.confluent:kafka-streams-avro-serde:5.1.2')
    compile('io.confluent:kafka-avro-serializer:5.1.2')
    compile('io.confluent:kafka-schema-registry-client:5.1.2')
    compile('io.confluent:monitoring-interceptors:5.1.2')

    compile('org.apache.avro:avro:1.8.2')

    // Logging
    //
    compile('org.apache.logging.log4j:log4j-slf4j-impl:2.11.0')

    // Websockets
    //
    compile('javax.websocket:javax.websocket-api:1.1')
    compile('org.eclipse.jetty.websocket:javax-websocket-server-impl:9.2.7.v20150116')
    compile('com.google.code.gson:gson:2.8.0')

    // Ulid generator
    //
    compile('de.huxhorn.sulky:de.huxhorn.sulky.ulid:8.2.0')
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

publishing {
    publications {
        polarisKafka(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = 'polaris-kafka-repo'
            url = "s3://polaris-kafka-maven-publish/maven2"

            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}

// This is a dummy - start scripts are detailed below
//
mainClassName = "dummy"

task SessionProcessor(type:CreateStartScripts) {
    applicationName = 'SessionProcessor'
    mainClassName = 'test.sessions.consumers.SessionProcessorKt'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}
applicationDistribution.from(SessionProcessor) { into 'bin' }


task RandomProducer(type:CreateStartScripts) {
    applicationName = 'RandomProducer'
    mainClassName = 'test.sessions.producers.RandomProducerKt'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}
applicationDistribution.from(RandomProducer) { into 'bin' }

task ActivityProcessor(type:CreateStartScripts) {
    applicationName = 'ActivityProcessor'
    mainClassName = 'test.sessions.consumers.ActivityProcessorKt'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}
applicationDistribution.from(ActivityProcessor) { into 'bin' }

task PopularityProcessor(type:CreateStartScripts) {
    applicationName = 'PopularityProcessor'
    mainClassName = 'test.sessions.consumers.PopularityProcessorKt'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
}
applicationDistribution.from(PopularityProcessor) { into 'bin' }
